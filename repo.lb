#!/usr/bin/env python3
############################################################################
#
#   Copyright (c) 2023 PX4 Development Team. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name PX4 nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

import kconfiglib


def print_node(node, indent=""):
	print()
	print(indent, node)
	if node.list is not None:
		print_node(node.list, indent + ">")
	if node.next is not None:
		print_node(node.next, indent)


if __name__ == "__main__":
	kconf = kconfiglib.Kconfig()
	print(kconf.top_node)
	print_node(kconf.top_node.list)


else:
	class DefineModule(Module):
		def __init__(self, name, define=None):
			self.name = name
			self.define = define

		def init(self, module):
			module.name = self.name

		def prepare(self, module, options):
			return True

		def build(self, env):
			if self.define is not None:
				print(f"{self.define}=y")


def init(repo):
    repo.name = "px4"
    repo.add_option(
    	EnumerationOption(name="platform",
    	                  enumeration=["nuttx", "posix", "qurt", "ros2"],
    	                  default="nuttx",
    	                  description="The underlying operating system used on the system."))

def prepare(repo, options):
    repo.add_modules_recursive("boards", modulefile="*.lb")
    repo.add_modules_recursive("cmake", modulefile="*.lb")
    repo.add_modules_recursive("src/drivers", modulefile="*.lb")


# def build(env):
# 	env.collect("")
