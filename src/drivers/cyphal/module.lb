#!/usr/bin/env python3
############################################################################
#
#   Copyright (c) 2023 PX4 Development Team. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name PX4 nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

with open(localpath("../common.py")) as common:
    exec(common.read())


class CyphalClient(Module):
    def init(self, module):
        module.name = "client"
        module.description = "Implement Cyphal PNP server functionality and manages discovered nodes"

    def prepare(self, module, options):
        module.add_option(
            BooleanOption(name="app_descriptor", default=False,
                          dependencies=lambda v: ":driver:bootloaders" if v else None,
                          description="When the board uses the UAVCANv0 bootloader functionality you need a AppImageDescriptor defined"))
        return True

    def build(self, env):
        pass


def init(module):
    module.name = ":driver:cyphal"
    module.description = "Cyphal Drivers"


def prepare(module, options):
    module.add_set_option(
        EnumerationOption(name="publisher_support", description="",
                          enumeration=["esc", "readiness", "actuator_outputs", "sensor_gps"]))
    module.add_set_option(
        EnumerationOption(name="subscriber_support", description="",
                          enumeration=["esc", "gnss0", "gnss1", "bms", "sensor_gps"]))
    module.add_set_option(
        EnumerationOption(name="advertised_services", description="",
                          enumeration=["get_info", "execute_command"]))
    module.add_modules(DefineModule("server", define="CYPHAL_FMU"), CyphalClient())
    return True


def validate(env):
    if env.has_module("::cyphal:server") and env.has_module("::cyphal:client"):
        env.log.error("Cyphal node cannot be both server and client!") ## REMOVE or REMODEL
        # raise ValidateException("Cyphal node cannot be both server and client!")


def build(env):
    pass
