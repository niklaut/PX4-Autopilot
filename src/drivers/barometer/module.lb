#!/usr/bin/env python3
############################################################################
#
#   Copyright (c) 2023 PX4 Development Team. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name PX4 nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

with open(localpath("../common.py")) as common:
    exec(common.read())


def init(module):
    module.name = ":driver:barometer"
    module.description = "Barometer Drivers"


def prepare(module, options):
    module.add_modules(
        DefineModule("bmp280", define="DRIVERS_BAROMETER_BMP280"),
        DefineModule("bmp388", define="DRIVERS_BAROMETER_BMP388"),
        DefineModule("dps310", define="DRIVERS_BAROMETER_DPS310"),
        DefineModule("spl06", define="DRIVERS_BAROMETER_GOERTEK_SPL06"),
        DefineModule("icp10100", define="DRIVERS_BAROMETER_INVENSENSE_ICP10100"),
        DefineModule("icp10111", define="DRIVERS_BAROMETER_INVENSENSE_ICP10111"),
        DefineModule("icp101xx", define="DRIVERS_BAROMETER_INVENSENSE_ICP101XX"),
        DefineModule("icp201xx", define="DRIVERS_BAROMETER_INVENSENSE_ICP201XX"),
        DefineModule("lps22hb", define="DRIVERS_BAROMETER_LPS22HB"),
        DefineModule("lps25h", define="DRIVERS_BAROMETER_LPS25H"),
        DefineModule("lps33hw", define="DRIVERS_BAROMETER_LPS33HW"),
        DefineModule("mpc2520", define="DRIVERS_BAROMETER_MAIERTEK_MPC2520"),
        DefineModule("mpl3115a2", define="DRIVERS_BAROMETER_MPL3115A2"),
        DefineModule("ms5611", define="DRIVERS_BAROMETER_MS5611"),
        DefineModule("ms5837", define="DRIVERS_BAROMETER_MS5837"),
        DefineModule("tcbp001ta", define="DRIVERS_BAROMETER_TCBP001TA"),
    )
    return True


def build(env):
    pass
